/** Generated by SimQ **/
/** modules **/

// Generated by CoffeeScript 1.6.3
(function() {
  var SUPPORTED, cache, modules, require, resolve;

  if (!this.require) {
    SUPPORTED = ['js', 'json', 'ts', 'coffee', 'eco'];
    modules = {};
    cache = {};
    require = function(name, parent) {
      var fullName, m;
      if (parent == null) {
        parent = null;
      }
      fullName = resolve(name, parent);
      if (fullName === null) {
        throw new Error('Module ' + name + ' was not found.');
      }
      if (typeof cache[fullName] === 'undefined') {
        m = {
          exports: {},
          id: fullName,
          filename: fullName,
          loaded: false,
          parent: null,
          children: null
        };
        modules[fullName].apply(modules[fullName], [m.exports, m]);
        m.loaded = true;
        cache[fullName] = m;
      }
      return cache[fullName].exports;
    };
    resolve = function(name, parent) {
      var ext, num, part, parts, prev, result, _i, _j, _k, _len, _len1, _len2;
      if (parent == null) {
        parent = null;
      }
      if (parent !== null && name[0] === '.') {
        num = parent.lastIndexOf('/');
        if (num !== -1) {
          parent = parent.substr(0, num);
        }
        name = parent + '/' + name;
        parts = name.split('/');
        result = [];
        prev = null;
        for (_i = 0, _len = parts.length; _i < _len; _i++) {
          part = parts[_i];
          if (part === '.' || part === '') {
            continue;
          } else if (part === '..' && prev) {
            result.pop();
          } else {
            result.push(part);
          }
          prev = part;
        }
        name = result.join('/');
        if (parent[0] === '/') {
          name = '/' + name;
        }
      }
      if (typeof modules[name] !== 'undefined') {
        return name;
      }
      for (_j = 0, _len1 = SUPPORTED.length; _j < _len1; _j++) {
        ext = SUPPORTED[_j];
        if (typeof modules[name + '.' + ext] !== 'undefined') {
          return name + '.' + ext;
        }
      }
      for (_k = 0, _len2 = SUPPORTED.length; _k < _len2; _k++) {
        ext = SUPPORTED[_k];
        if (typeof modules[name + '/index.' + ext] !== 'undefined') {
          return name + '/index.' + ext;
        }
      }
      return null;
    };
    this.require = function(name, parent) {
      if (parent == null) {
        parent = null;
      }
      return require(name, parent);
    };
    this.require.resolve = function(name, parent) {
      if (parent == null) {
        parent = null;
      }
      return resolve(name, parent);
    };
    this.require.define = function(bundle) {
      var m, name, _results;
      _results = [];
      for (name in bundle) {
        m = bundle[name];
        _results.push(modules[name] = m);
      }
      return _results;
    };
    this.require.release = function() {
      var name, _results;
      _results = [];
      for (name in cache) {
        _results.push(delete cache[name]);
      }
      return _results;
    };
    this.require.cache = cache;
  }

  return this.require.define;

}).call(this)({
 'extended-spine-di/lib/Controller.js': function(exports, module) {

	/** node globals **/
	var require = function(name) {return window.require(name, 'extended-spine-di/lib/Controller.js');};
	require.resolve = function(name, parent) {if (parent === null) {parent = 'extended-spine-di/lib/Controller.js';} return window.require.resolve(name, parent);};
	require.define = function(bundle) {window.require.define(bundle);};
	require.cache = window.require.cache;
	var __filename = 'extended-spine-di/lib/Controller.js';
	var __dirname = 'extended-spine-di/lib';
	var process = {cwd: function() {return '/';}, argv: ['node', 'extended-spine-di/lib/Controller.js'], env: {}};

	/** code **/
	// Generated by CoffeeScript 1.6.3
	(function() {
	  var BaseController, Controller, DI, _ref,
	    __hasProp = {}.hasOwnProperty,
	    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };
	
	  BaseController = require('extended-spine/Controller');
	
	  DI = require('dependency-injection');
	
	  Controller = (function(_super) {
	    __extends(Controller, _super);
	
	    function Controller() {
	      _ref = Controller.__super__.constructor.apply(this, arguments);
	      return _ref;
	    }
	
	    Controller.di = null;
	
	    Controller.init = function(jQuery, di, scope) {
	      if (scope == null) {
	        scope = '[data-application]:first';
	      }
	      if (!(di instanceof DI)) {
	        throw new Error('di container must be an instance of dependency-inject object.');
	      }
	      Controller.di = di;
	      return Controller.__super__.constructor.init.call(this, jQuery, scope);
	    };
	
	    Controller.createController = function(name, el) {
	      var controller;
	      controller = require(name);
	      return Controller.di.createInstance(controller, [el]);
	    };
	
	    return Controller;
	
	  })(BaseController);
	
	  module.exports = Controller;
	
	}).call(this);
	

}, 'extended-spine/Controller.js': function(exports, module) {

	/** node globals **/
	var require = function(name) {return window.require(name, 'extended-spine/Controller.js');};
	require.resolve = function(name, parent) {if (parent === null) {parent = 'extended-spine/Controller.js';} return window.require.resolve(name, parent);};
	require.define = function(bundle) {window.require.define(bundle);};
	require.cache = window.require.cache;
	var __filename = 'extended-spine/Controller.js';
	var __dirname = 'extended-spine';
	var process = {cwd: function() {return '/';}, argv: ['node', 'extended-spine/Controller.js'], env: {}};

	/** code **/
	module.exports = require('./lib/Controller.js');

}, 'extended-spine/lib/Controller.js': function(exports, module) {

	/** node globals **/
	var require = function(name) {return window.require(name, 'extended-spine/lib/Controller.js');};
	require.resolve = function(name, parent) {if (parent === null) {parent = 'extended-spine/lib/Controller.js';} return window.require.resolve(name, parent);};
	require.define = function(bundle) {window.require.define(bundle);};
	require.cache = window.require.cache;
	var __filename = 'extended-spine/lib/Controller.js';
	var __dirname = 'extended-spine/lib';
	var process = {cwd: function() {return '/';}, argv: ['node', 'extended-spine/lib/Controller.js'], env: {}};

	/** code **/
	// Generated by CoffeeScript 1.6.3
	(function() {
	  var Controller, Spine, isMobile,
	    __hasProp = {}.hasOwnProperty,
	    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };
	
	  Spine = require('spine');
	
	  isMobile = require('is-mobile');
	
	  Controller = (function(_super) {
	    __extends(Controller, _super);
	
	    Controller.jQuery = null;
	
	    function Controller(el) {
	      if (el == null) {
	        el = null;
	      }
	      if (!this.el && el instanceof Controller.jQuery) {
	        this.el = el;
	      }
	      Controller.__super__.constructor.call(this, this, []);
	      this.el.data('controller', this);
	    }
	
	    Controller.init = function(jQuery, scope) {
	      if (scope == null) {
	        scope = '[data-application]:first';
	      }
	      Controller.jQuery = jQuery;
	      Controller.jQuery.fn.hasAttr = function(name) {
	        var attr;
	        attr = $(this).attr(name);
	        return typeof attr !== 'undefined' && attr !== false;
	      };
	      Controller.jQuery.fn.getController = function() {
	        return Controller.jQuery(this).data('controller');
	      };
	      if (scope !== false) {
	        return Controller.refresh(scope);
	      }
	    };
	
	    Controller.prototype.getAllEvents = function() {
	      var context, event, events, match, method, parent_prototype, result, selector;
	      events = this.events ? this.events : {};
	      context = this;
	      while (parent_prototype = context.constructor.__super__) {
	        if (parent_prototype.events) {
	          events = Controller.jQuery.extend({}, parent_prototype.events, events);
	        }
	        context = parent_prototype;
	      }
	      result = [];
	      for (event in events) {
	        method = events[event];
	        match = event.match(this.eventSplitter);
	        event = match[1];
	        selector = match[2];
	        result.push({
	          event: event,
	          selector: selector === '' ? null : selector,
	          method: method
	        });
	      }
	      return result;
	    };
	
	    Controller.prototype.unbindUiEvents = function() {
	      var info, _i, _len, _ref, _results;
	      _ref = this.getAllEvents();
	      _results = [];
	      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
	        info = _ref[_i];
	        if (info.selector === null) {
	          _results.push(this.el.unbind(info.event));
	        } else {
	          _results.push(this.el.undelegate(info.selector, info.event));
	        }
	      }
	      return _results;
	    };
	
	    Controller.findElementsWithController = function(scope) {
	      var result;
	      if (scope == null) {
	        scope = 'html';
	      }
	      scope = Controller.jQuery(scope);
	      result = [];
	      if (scope.hasAttr('data-controller')) {
	        result.push(scope);
	      }
	      scope.find('*[data-controller]').each(function(i, el) {
	        el = Controller.jQuery(el);
	        return result.push(el);
	      });
	      return result;
	    };
	
	    Controller.refresh = function(scope) {
	      var el, _i, _len, _ref, _results;
	      if (scope == null) {
	        scope = 'html';
	      }
	      _ref = Controller.findElementsWithController(scope);
	      _results = [];
	      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
	        el = _ref[_i];
	        _results.push(Controller.register(el.attr('data-controller'), el));
	      }
	      return _results;
	    };
	
	    Controller.unbind = function(scope) {
	      var controller, el, _i, _len, _ref, _results;
	      if (scope == null) {
	        scope = 'html';
	      }
	      _ref = Controller.findElementsWithController(scope);
	      _results = [];
	      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
	        el = _ref[_i];
	        controller = el.data('_controller');
	        controller.unbind();
	        controller.stopListening();
	        controller.unbindUiEvents();
	        _results.push(el.data('_controller', null));
	      }
	      return _results;
	    };
	
	    Controller.register = function(path, el) {
	      var computer, mobile;
	      if (el == null) {
	        el = null;
	      }
	      if (el !== null) {
	        el = Controller.jQuery(el);
	      }
	      computer = el.hasAttr('data-computer');
	      mobile = el.hasAttr('data-mobile');
	      if (el !== null && (computer || mobile)) {
	        if (computer && isMobile()) {
	          return false;
	        }
	        if (mobile && !isMobile()) {
	          return false;
	        }
	      }
	      return Controller.createController(path, el);
	    };
	
	    Controller.createController = function(name, el) {
	      return new (require(name))(el);
	    };
	
	    return Controller;
	
	  })(Spine.Controller);
	
	  module.exports = Controller;
	
	}).call(this);
	

}, 'spine/index.js': function(exports, module) {

	/** node globals **/
	var require = function(name) {return window.require(name, 'spine/index.js');};
	require.resolve = function(name, parent) {if (parent === null) {parent = 'spine/index.js';} return window.require.resolve(name, parent);};
	require.define = function(bundle) {window.require.define(bundle);};
	require.cache = window.require.cache;
	var __filename = 'spine/index.js';
	var __dirname = 'spine';
	var process = {cwd: function() {return '/';}, argv: ['node', 'spine/index.js'], env: {}};

	/** code **/
	module.exports = require('./lib/spine');

}, 'spine/lib/spine.js': function(exports, module) {

	/** node globals **/
	var require = function(name) {return window.require(name, 'spine/lib/spine.js');};
	require.resolve = function(name, parent) {if (parent === null) {parent = 'spine/lib/spine.js';} return window.require.resolve(name, parent);};
	require.define = function(bundle) {window.require.define(bundle);};
	require.cache = window.require.cache;
	var __filename = 'spine/lib/spine.js';
	var __dirname = 'spine/lib';
	var process = {cwd: function() {return '/';}, argv: ['node', 'spine/lib/spine.js'], env: {}};

	/** code **/
	// Generated by CoffeeScript 1.6.3
	/*
	Spine.js MVC library
	Released under the MIT License
	*/
	
	
	(function() {
	  var $, Controller, Events, Log, Model, Module, Spine, createObject, isArray, isBlank, makeArray, moduleKeywords,
	    __slice = [].slice,
	    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
	    __hasProp = {}.hasOwnProperty,
	    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };
	
	  Events = {
	    bind: function(ev, callback) {
	      var calls, evs, name, _i, _len;
	      evs = ev.split(' ');
	      calls = this.hasOwnProperty('_callbacks') && this._callbacks || (this._callbacks = {});
	      for (_i = 0, _len = evs.length; _i < _len; _i++) {
	        name = evs[_i];
	        calls[name] || (calls[name] = []);
	        calls[name].push(callback);
	      }
	      return this;
	    },
	    one: function(ev, callback) {
	      var handler;
	      return this.bind(ev, handler = function() {
	        this.unbind(ev, handler);
	        return callback.apply(this, arguments);
	      });
	    },
	    trigger: function() {
	      var args, callback, ev, list, _i, _len, _ref;
	      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
	      ev = args.shift();
	      list = this.hasOwnProperty('_callbacks') && ((_ref = this._callbacks) != null ? _ref[ev] : void 0);
	      if (!list) {
	        return;
	      }
	      for (_i = 0, _len = list.length; _i < _len; _i++) {
	        callback = list[_i];
	        if (callback.apply(this, args) === false) {
	          break;
	        }
	      }
	      return true;
	    },
	    listenTo: function(obj, ev, callback) {
	      obj.bind(ev, callback);
	      this.listeningTo || (this.listeningTo = []);
	      this.listeningTo.push({
	        obj: obj,
	        ev: ev,
	        callback: callback
	      });
	      return this;
	    },
	    listenToOnce: function(obj, ev, callback) {
	      var handler, listeningToOnce;
	      listeningToOnce = this.listeningToOnce || (this.listeningToOnce = []);
	      obj.bind(ev, handler = function() {
	        var i, idx, lt, _i, _len;
	        idx = -1;
	        for (i = _i = 0, _len = listeningToOnce.length; _i < _len; i = ++_i) {
	          lt = listeningToOnce[i];
	          if (lt.obj === obj) {
	            if (lt.ev === ev && lt.callback === callback) {
	              idx = i;
	            }
	          }
	        }
	        obj.unbind(ev, handler);
	        if (idx !== -1) {
	          listeningToOnce.splice(idx, 1);
	        }
	        return callback.apply(this, arguments);
	      });
	      listeningToOnce.push({
	        obj: obj,
	        ev: ev,
	        callback: callback,
	        handler: handler
	      });
	      return this;
	    },
	    stopListening: function(obj, events, callback) {
	      var ev, evts, i, idx, listeningTo, lt, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _results;
	      if (arguments.length === 0) {
	        _ref = [this.listeningTo, this.listeningToOnce];
	        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
	          listeningTo = _ref[_i];
	          if (!listeningTo) {
	            continue;
	          }
	          for (_j = 0, _len1 = listeningTo.length; _j < _len1; _j++) {
	            lt = listeningTo[_j];
	            lt.obj.unbind(lt.ev, lt.handler || lt.callback);
	          }
	        }
	        this.listeningTo = void 0;
	        return this.listeningToOnce = void 0;
	      } else if (obj) {
	        _ref1 = [this.listeningTo, this.listeningToOnce];
	        _results = [];
	        for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
	          listeningTo = _ref1[_k];
	          if (!listeningTo) {
	            continue;
	          }
	          events = events ? events.split(' ') : [void 0];
	          _results.push((function() {
	            var _l, _len3, _results1;
	            _results1 = [];
	            for (_l = 0, _len3 = events.length; _l < _len3; _l++) {
	              ev = events[_l];
	              _results1.push((function() {
	                var _m, _ref2, _results2;
	                _results2 = [];
	                for (idx = _m = _ref2 = listeningTo.length - 1; _ref2 <= 0 ? _m <= 0 : _m >= 0; idx = _ref2 <= 0 ? ++_m : --_m) {
	                  lt = listeningTo[idx];
	                  if ((!ev) || (ev === lt.ev)) {
	                    lt.obj.unbind(lt.ev, lt.handler || lt.callback);
	                    if (idx !== -1) {
	                      _results2.push(listeningTo.splice(idx, 1));
	                    } else {
	                      _results2.push(void 0);
	                    }
	                  } else if (ev) {
	                    evts = lt.ev.split(' ');
	                    if (~(i = evts.indexOf(ev))) {
	                      evts.splice(i, 1);
	                      lt.ev = $.trim(evts.join(' '));
	                      _results2.push(lt.obj.unbind(ev, lt.handler || lt.callback));
	                    } else {
	                      _results2.push(void 0);
	                    }
	                  } else {
	                    _results2.push(void 0);
	                  }
	                }
	                return _results2;
	              })());
	            }
	            return _results1;
	          })());
	        }
	        return _results;
	      }
	    },
	    unbind: function(ev, callback) {
	      var cb, evs, i, list, name, _i, _j, _len, _len1, _ref;
	      if (arguments.length === 0) {
	        this._callbacks = {};
	        return this;
	      }
	      if (!ev) {
	        return this;
	      }
	      evs = ev.split(' ');
	      for (_i = 0, _len = evs.length; _i < _len; _i++) {
	        name = evs[_i];
	        list = (_ref = this._callbacks) != null ? _ref[name] : void 0;
	        if (!list) {
	          continue;
	        }
	        if (!callback) {
	          delete this._callbacks[name];
	          continue;
	        }
	        for (i = _j = 0, _len1 = list.length; _j < _len1; i = ++_j) {
	          cb = list[i];
	          if (!(cb === callback)) {
	            continue;
	          }
	          list = list.slice();
	          list.splice(i, 1);
	          this._callbacks[name] = list;
	          break;
	        }
	      }
	      return this;
	    }
	  };
	
	  Events.on = Events.bind;
	
	  Events.off = Events.unbind;
	
	  Log = {
	    trace: true,
	    logPrefix: '(App)',
	    log: function() {
	      var args;
	      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
	      if (!this.trace) {
	        return;
	      }
	      if (this.logPrefix) {
	        args.unshift(this.logPrefix);
	      }
	      if (typeof console !== "undefined" && console !== null) {
	        if (typeof console.log === "function") {
	          console.log.apply(console, args);
	        }
	      }
	      return this;
	    }
	  };
	
	  moduleKeywords = ['included', 'extended'];
	
	  Module = (function() {
	    Module.include = function(obj) {
	      var key, value, _ref;
	      if (!obj) {
	        throw new Error('include(obj) requires obj');
	      }
	      for (key in obj) {
	        value = obj[key];
	        if (__indexOf.call(moduleKeywords, key) < 0) {
	          this.prototype[key] = value;
	        }
	      }
	      if ((_ref = obj.included) != null) {
	        _ref.apply(this);
	      }
	      return this;
	    };
	
	    Module.extend = function(obj) {
	      var key, value, _ref;
	      if (!obj) {
	        throw new Error('extend(obj) requires obj');
	      }
	      for (key in obj) {
	        value = obj[key];
	        if (__indexOf.call(moduleKeywords, key) < 0) {
	          this[key] = value;
	        }
	      }
	      if ((_ref = obj.extended) != null) {
	        _ref.apply(this);
	      }
	      return this;
	    };
	
	    Module.proxy = function(func) {
	      var _this = this;
	      return function() {
	        return func.apply(_this, arguments);
	      };
	    };
	
	    Module.prototype.proxy = function(func) {
	      var _this = this;
	      return function() {
	        return func.apply(_this, arguments);
	      };
	    };
	
	    function Module() {
	      if (typeof this.init === "function") {
	        this.init.apply(this, arguments);
	      }
	    }
	
	    return Module;
	
	  })();
	
	  Model = (function(_super) {
	    __extends(Model, _super);
	
	    Model.extend(Events);
	
	    Model.records = [];
	
	    Model.irecords = {};
	
	    Model.attributes = [];
	
	    Model.configure = function() {
	      var attributes, name;
	      name = arguments[0], attributes = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
	      this.className = name;
	      this.deleteAll();
	      if (attributes.length) {
	        this.attributes = attributes;
	      }
	      this.attributes && (this.attributes = makeArray(this.attributes));
	      this.attributes || (this.attributes = []);
	      this.unbind();
	      return this;
	    };
	
	    Model.toString = function() {
	      return "" + this.className + "(" + (this.attributes.join(", ")) + ")";
	    };
	
	    Model.find = function(id) {
	      var record;
	      record = this.exists(id);
	      if (!record) {
	        throw new Error("\"" + this.className + "\" model could not find a record for the ID \"" + id + "\"");
	      }
	      return record;
	    };
	
	    Model.exists = function(id) {
	      var _ref;
	      return (_ref = this.irecords[id]) != null ? _ref.clone() : void 0;
	    };
	
	    Model.addRecord = function(record) {
	      if (record.id && this.irecords[record.id]) {
	        this.irecords[record.id].remove();
	      }
	      record.id || (record.id = record.cid);
	      this.records.push(record);
	      this.irecords[record.id] = record;
	      return this.irecords[record.cid] = record;
	    };
	
	    Model.refresh = function(values, options) {
	      var record, records, result, _i, _len;
	      if (options == null) {
	        options = {};
	      }
	      if (options.clear) {
	        this.deleteAll();
	      }
	      records = this.fromJSON(values);
	      if (!isArray(records)) {
	        records = [records];
	      }
	      for (_i = 0, _len = records.length; _i < _len; _i++) {
	        record = records[_i];
	        this.addRecord(record);
	      }
	      this.sort();
	      result = this.cloneArray(records);
	      this.trigger('refresh', result, options);
	      return result;
	    };
	
	    Model.select = function(callback) {
	      var record, _i, _len, _ref, _results;
	      _ref = this.records;
	      _results = [];
	      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
	        record = _ref[_i];
	        if (callback(record)) {
	          _results.push(record.clone());
	        }
	      }
	      return _results;
	    };
	
	    Model.findByAttribute = function(name, value) {
	      var record, _i, _len, _ref;
	      _ref = this.records;
	      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
	        record = _ref[_i];
	        if (record[name] === value) {
	          return record.clone();
	        }
	      }
	      return null;
	    };
	
	    Model.findAllByAttribute = function(name, value) {
	      return this.select(function(item) {
	        return item[name] === value;
	      });
	    };
	
	    Model.each = function(callback) {
	      var record, _i, _len, _ref, _results;
	      _ref = this.records;
	      _results = [];
	      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
	        record = _ref[_i];
	        _results.push(callback(record.clone()));
	      }
	      return _results;
	    };
	
	    Model.all = function() {
	      return this.cloneArray(this.records);
	    };
	
	    Model.first = function() {
	      var _ref;
	      return (_ref = this.records[0]) != null ? _ref.clone() : void 0;
	    };
	
	    Model.last = function() {
	      var _ref;
	      return (_ref = this.records[this.records.length - 1]) != null ? _ref.clone() : void 0;
	    };
	
	    Model.count = function() {
	      return this.records.length;
	    };
	
	    Model.deleteAll = function() {
	      this.records = [];
	      return this.irecords = {};
	    };
	
	    Model.destroyAll = function(options) {
	      var record, _i, _len, _ref, _results;
	      _ref = this.records;
	      _results = [];
	      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
	        record = _ref[_i];
	        _results.push(record.destroy(options));
	      }
	      return _results;
	    };
	
	    Model.update = function(id, atts, options) {
	      return this.find(id).updateAttributes(atts, options);
	    };
	
	    Model.create = function(atts, options) {
	      var record;
	      record = new this(atts);
	      return record.save(options);
	    };
	
	    Model.destroy = function(id, options) {
	      return this.find(id).destroy(options);
	    };
	
	    Model.change = function(callbackOrParams) {
	      if (typeof callbackOrParams === 'function') {
	        return this.bind('change', callbackOrParams);
	      } else {
	        return this.trigger.apply(this, ['change'].concat(__slice.call(arguments)));
	      }
	    };
	
	    Model.fetch = function(callbackOrParams) {
	      if (typeof callbackOrParams === 'function') {
	        return this.bind('fetch', callbackOrParams);
	      } else {
	        return this.trigger.apply(this, ['fetch'].concat(__slice.call(arguments)));
	      }
	    };
	
	    Model.toJSON = function() {
	      return this.records;
	    };
	
	    Model.fromJSON = function(objects) {
	      var value, _i, _len, _results;
	      if (!objects) {
	        return;
	      }
	      if (typeof objects === 'string') {
	        objects = JSON.parse(objects);
	      }
	      if (isArray(objects)) {
	        _results = [];
	        for (_i = 0, _len = objects.length; _i < _len; _i++) {
	          value = objects[_i];
	          _results.push(new this(value));
	        }
	        return _results;
	      } else {
	        return new this(objects);
	      }
	    };
	
	    Model.fromForm = function() {
	      var _ref;
	      return (_ref = new this).fromForm.apply(_ref, arguments);
	    };
	
	    Model.sort = function() {
	      if (this.comparator) {
	        this.records.sort(this.comparator);
	      }
	      return this;
	    };
	
	    Model.cloneArray = function(array) {
	      var value, _i, _len, _results;
	      _results = [];
	      for (_i = 0, _len = array.length; _i < _len; _i++) {
	        value = array[_i];
	        _results.push(value.clone());
	      }
	      return _results;
	    };
	
	    Model.idCounter = 0;
	
	    Model.uid = function(prefix) {
	      var uid;
	      if (prefix == null) {
	        prefix = '';
	      }
	      uid = prefix + this.idCounter++;
	      if (this.exists(uid)) {
	        uid = this.uid(prefix);
	      }
	      return uid;
	    };
	
	    function Model(atts) {
	      Model.__super__.constructor.apply(this, arguments);
	      if (atts) {
	        this.load(atts);
	      }
	      this.cid = (atts != null ? atts.cid : void 0) || this.constructor.uid('c-');
	    }
	
	    Model.prototype.isNew = function() {
	      return !this.exists();
	    };
	
	    Model.prototype.isValid = function() {
	      return !this.validate();
	    };
	
	    Model.prototype.validate = function() {};
	
	    Model.prototype.load = function(atts) {
	      var key, value;
	      if (atts.id) {
	        this.id = atts.id;
	      }
	      for (key in atts) {
	        value = atts[key];
	        if (atts.hasOwnProperty(key) && typeof this[key] === 'function') {
	          this[key](value);
	        } else {
	          this[key] = value;
	        }
	      }
	      return this;
	    };
	
	    Model.prototype.attributes = function() {
	      var key, result, _i, _len, _ref;
	      result = {};
	      _ref = this.constructor.attributes;
	      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
	        key = _ref[_i];
	        if (key in this) {
	          if (typeof this[key] === 'function') {
	            result[key] = this[key]();
	          } else {
	            result[key] = this[key];
	          }
	        }
	      }
	      if (this.id) {
	        result.id = this.id;
	      }
	      return result;
	    };
	
	    Model.prototype.eql = function(rec) {
	      return !!(rec && rec.constructor === this.constructor && ((rec.cid === this.cid) || (rec.id && rec.id === this.id)));
	    };
	
	    Model.prototype.save = function(options) {
	      var error, record;
	      if (options == null) {
	        options = {};
	      }
	      if (options.validate !== false) {
	        error = this.validate();
	        if (error) {
	          this.trigger('error', error);
	          return false;
	        }
	      }
	      this.trigger('beforeSave', options);
	      record = this.isNew() ? this.create(options) : this.update(options);
	      this.stripCloneAttrs();
	      this.trigger('save', options);
	      return record;
	    };
	
	    Model.prototype.stripCloneAttrs = function() {
	      var key, value;
	      if (this.hasOwnProperty('cid')) {
	        return;
	      }
	      for (key in this) {
	        if (!__hasProp.call(this, key)) continue;
	        value = this[key];
	        if (this.constructor.attributes.indexOf(key) > -1) {
	          delete this[key];
	        }
	      }
	      return this;
	    };
	
	    Model.prototype.updateAttribute = function(name, value, options) {
	      var atts;
	      atts = {};
	      atts[name] = value;
	      return this.updateAttributes(atts, options);
	    };
	
	    Model.prototype.updateAttributes = function(atts, options) {
	      this.load(atts);
	      return this.save(options);
	    };
	
	    Model.prototype.changeID = function(id) {
	      var records;
	      if (id === this.id) {
	        return;
	      }
	      records = this.constructor.irecords;
	      records[id] = records[this.id];
	      if (this.cid !== this.id) {
	        delete records[this.id];
	      }
	      this.id = id;
	      return this.save();
	    };
	
	    Model.prototype.remove = function() {
	      var i, record, records, _i, _len;
	      records = this.constructor.records.slice(0);
	      for (i = _i = 0, _len = records.length; _i < _len; i = ++_i) {
	        record = records[i];
	        if (!(this.eql(record))) {
	          continue;
	        }
	        records.splice(i, 1);
	        break;
	      }
	      this.constructor.records = records;
	      delete this.constructor.irecords[this.id];
	      return delete this.constructor.irecords[this.cid];
	    };
	
	    Model.prototype.destroy = function(options) {
	      if (options == null) {
	        options = {};
	      }
	      this.trigger('beforeDestroy', options);
	      this.remove();
	      this.destroyed = true;
	      this.trigger('destroy', options);
	      this.trigger('change', 'destroy', options);
	      if (this.listeningTo) {
	        this.stopListening();
	      }
	      this.unbind();
	      return this;
	    };
	
	    Model.prototype.dup = function(newRecord) {
	      var atts;
	      if (newRecord == null) {
	        newRecord = true;
	      }
	      atts = this.attributes();
	      if (newRecord) {
	        delete atts.id;
	      } else {
	        atts.cid = this.cid;
	      }
	      return new this.constructor(atts);
	    };
	
	    Model.prototype.clone = function() {
	      return createObject(this);
	    };
	
	    Model.prototype.reload = function() {
	      var original;
	      if (this.isNew()) {
	        return this;
	      }
	      original = this.constructor.find(this.id);
	      this.load(original.attributes());
	      return original;
	    };
	
	    Model.prototype.refresh = function(data) {
	      var root;
	      root = this.constructor.irecords[this.id];
	      root.load(data);
	      this.trigger('refresh');
	      return this;
	    };
	
	    Model.prototype.toJSON = function() {
	      return this.attributes();
	    };
	
	    Model.prototype.toString = function() {
	      return "<" + this.constructor.className + " (" + (JSON.stringify(this)) + ")>";
	    };
	
	    Model.prototype.fromForm = function(form) {
	      var checkbox, key, name, result, _i, _j, _k, _len, _len1, _len2, _name, _ref, _ref1, _ref2;
	      result = {};
	      _ref = $(form).find('[type=checkbox]:not([value])');
	      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
	        checkbox = _ref[_i];
	        result[checkbox.name] = $(checkbox).prop('checked');
	      }
	      _ref1 = $(form).find('[type=checkbox][name$="[]"]');
	      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
	        checkbox = _ref1[_j];
	        name = checkbox.name.replace(/\[\]$/, '');
	        result[name] || (result[name] = []);
	        if ($(checkbox).prop('checked')) {
	          result[name].push(checkbox.value);
	        }
	      }
	      _ref2 = $(form).serializeArray();
	      for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
	        key = _ref2[_k];
	        result[_name = key.name] || (result[_name] = key.value);
	      }
	      return this.load(result);
	    };
	
	    Model.prototype.exists = function() {
	      return this.constructor.exists(this.id);
	    };
	
	    Model.prototype.update = function(options) {
	      var clone, records;
	      this.trigger('beforeUpdate', options);
	      records = this.constructor.irecords;
	      records[this.id].load(this.attributes());
	      this.constructor.sort();
	      clone = records[this.id].clone();
	      clone.trigger('update', options);
	      clone.trigger('change', 'update', options);
	      return clone;
	    };
	
	    Model.prototype.create = function(options) {
	      var clone, record;
	      this.trigger('beforeCreate', options);
	      this.id || (this.id = this.cid);
	      record = this.dup(false);
	      this.constructor.addRecord(record);
	      this.constructor.sort();
	      clone = record.clone();
	      clone.trigger('create', options);
	      clone.trigger('change', 'create', options);
	      return clone;
	    };
	
	    Model.prototype.bind = function(events, callback) {
	      var binder, singleEvent, _fn, _i, _len, _ref,
	        _this = this;
	      this.constructor.bind(events, binder = function(record) {
	        if (record && _this.eql(record)) {
	          return callback.apply(_this, arguments);
	        }
	      });
	      _ref = events.split(' ');
	      _fn = function(singleEvent) {
	        var unbinder;
	        return _this.constructor.bind("unbind", unbinder = function(record, event, cb) {
	          if (record && _this.eql(record)) {
	            if (event && event !== singleEvent) {
	              return;
	            }
	            if (cb && cb !== callback) {
	              return;
	            }
	            _this.constructor.unbind(singleEvent, binder);
	            return _this.constructor.unbind("unbind", unbinder);
	          }
	        });
	      };
	      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
	        singleEvent = _ref[_i];
	        _fn(singleEvent);
	      }
	      return this;
	    };
	
	    Model.prototype.one = function(events, callback) {
	      var handler,
	        _this = this;
	      return this.bind(events, handler = function() {
	        _this.unbind(events, handler);
	        return callback.apply(_this, arguments);
	      });
	    };
	
	    Model.prototype.trigger = function() {
	      var args, _ref;
	      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
	      args.splice(1, 0, this);
	      return (_ref = this.constructor).trigger.apply(_ref, args);
	    };
	
	    Model.prototype.listenTo = function() {
	      return Events.listenTo.apply(this, arguments);
	    };
	
	    Model.prototype.listenToOnce = function() {
	      return Events.listenToOnce.apply(this, arguments);
	    };
	
	    Model.prototype.stopListening = function() {
	      return Events.stopListening.apply(this, arguments);
	    };
	
	    Model.prototype.unbind = function(events, callback) {
	      var event, _i, _len, _ref, _results;
	      if (arguments.length === 0) {
	        return this.trigger('unbind');
	      } else if (events) {
	        _ref = events.split(' ');
	        _results = [];
	        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
	          event = _ref[_i];
	          _results.push(this.trigger('unbind', event, callback));
	        }
	        return _results;
	      }
	    };
	
	    return Model;
	
	  })(Module);
	
	  Model.prototype.on = Model.prototype.bind;
	
	  Model.prototype.off = Model.prototype.unbind;
	
	  Controller = (function(_super) {
	    __extends(Controller, _super);
	
	    Controller.include(Events);
	
	    Controller.include(Log);
	
	    Controller.prototype.eventSplitter = /^(\S+)\s*(.*)$/;
	
	    Controller.prototype.tag = 'div';
	
	    function Controller(options) {
	      this.release = __bind(this.release, this);
	      var context, key, parent_prototype, value, _ref;
	      this.options = options;
	      _ref = this.options;
	      for (key in _ref) {
	        value = _ref[key];
	        this[key] = value;
	      }
	      if (!this.el) {
	        this.el = document.createElement(this.tag);
	      }
	      this.el = $(this.el);
	      this.$el = this.el;
	      if (this.className) {
	        this.el.addClass(this.className);
	      }
	      if (this.attributes) {
	        this.el.attr(this.attributes);
	      }
	      if (!this.events) {
	        this.events = this.constructor.events;
	      }
	      if (!this.elements) {
	        this.elements = this.constructor.elements;
	      }
	      context = this;
	      while (parent_prototype = context.constructor.__super__) {
	        if (parent_prototype.events) {
	          this.events = $.extend({}, parent_prototype.events, this.events);
	        }
	        if (parent_prototype.elements) {
	          this.elements = $.extend({}, parent_prototype.elements, this.elements);
	        }
	        context = parent_prototype;
	      }
	      if (this.events) {
	        this.delegateEvents(this.events);
	      }
	      if (this.elements) {
	        this.refreshElements();
	      }
	      Controller.__super__.constructor.apply(this, arguments);
	    }
	
	    Controller.prototype.release = function() {
	      this.trigger('release', this);
	      this.el.remove();
	      this.unbind();
	      return this.stopListening();
	    };
	
	    Controller.prototype.$ = function(selector) {
	      return $(selector, this.el);
	    };
	
	    Controller.prototype.delegateEvents = function(events) {
	      var eventName, key, match, method, selector, _results,
	        _this = this;
	      _results = [];
	      for (key in events) {
	        method = events[key];
	        if (typeof method === 'function') {
	          method = (function(method) {
	            return function() {
	              method.apply(_this, arguments);
	              return true;
	            };
	          })(method);
	        } else {
	          if (!this[method]) {
	            throw new Error("" + method + " doesn't exist");
	          }
	          method = (function(method) {
	            return function() {
	              _this[method].apply(_this, arguments);
	              return true;
	            };
	          })(method);
	        }
	        match = key.match(this.eventSplitter);
	        eventName = match[1];
	        selector = match[2];
	        if (selector === '') {
	          _results.push(this.el.bind(eventName, method));
	        } else {
	          _results.push(this.el.on(eventName, selector, method));
	        }
	      }
	      return _results;
	    };
	
	    Controller.prototype.refreshElements = function() {
	      var key, value, _ref, _results;
	      _ref = this.elements;
	      _results = [];
	      for (key in _ref) {
	        value = _ref[key];
	        _results.push(this[value] = this.$(key));
	      }
	      return _results;
	    };
	
	    Controller.prototype.delay = function(func, timeout) {
	      return setTimeout(this.proxy(func), timeout || 0);
	    };
	
	    Controller.prototype.html = function(element) {
	      this.el.html(element.el || element);
	      this.refreshElements();
	      return this.el;
	    };
	
	    Controller.prototype.append = function() {
	      var e, elements, _ref;
	      elements = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
	      elements = (function() {
	        var _i, _len, _results;
	        _results = [];
	        for (_i = 0, _len = elements.length; _i < _len; _i++) {
	          e = elements[_i];
	          _results.push(e.el || e);
	        }
	        return _results;
	      })();
	      (_ref = this.el).append.apply(_ref, elements);
	      this.refreshElements();
	      return this.el;
	    };
	
	    Controller.prototype.appendTo = function(element) {
	      this.el.appendTo(element.el || element);
	      this.refreshElements();
	      return this.el;
	    };
	
	    Controller.prototype.prepend = function() {
	      var e, elements, _ref;
	      elements = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
	      elements = (function() {
	        var _i, _len, _results;
	        _results = [];
	        for (_i = 0, _len = elements.length; _i < _len; _i++) {
	          e = elements[_i];
	          _results.push(e.el || e);
	        }
	        return _results;
	      })();
	      (_ref = this.el).prepend.apply(_ref, elements);
	      this.refreshElements();
	      return this.el;
	    };
	
	    Controller.prototype.replace = function(element) {
	      var previous, _ref, _ref1;
	      element = element.el || element;
	      if (typeof element === "string") {
	        element = $.trim(element);
	      }
	      _ref1 = [this.el, $(((_ref = $.parseHTML(element)) != null ? _ref[0] : void 0) || element)], previous = _ref1[0], this.el = _ref1[1];
	      previous.replaceWith(this.el);
	      this.delegateEvents(this.events);
	      this.refreshElements();
	      return this.el;
	    };
	
	    return Controller;
	
	  })(Module);
	
	  $ = (typeof window !== "undefined" && window !== null ? window.jQuery : void 0) || (typeof window !== "undefined" && window !== null ? window.Zepto : void 0) || function(element) {
	    return element;
	  };
	
	  createObject = Object.create || function(o) {
	    var Func;
	    Func = function() {};
	    Func.prototype = o;
	    return new Func();
	  };
	
	  isArray = function(value) {
	    return Object.prototype.toString.call(value) === '[object Array]';
	  };
	
	  isBlank = function(value) {
	    var key;
	    if (!value) {
	      return true;
	    }
	    for (key in value) {
	      return false;
	    }
	    return true;
	  };
	
	  makeArray = function(args) {
	    return Array.prototype.slice.call(args, 0);
	  };
	
	  Spine = this.Spine = {};
	
	  if (typeof module !== "undefined" && module !== null) {
	    module.exports = Spine;
	  }
	
	  Spine.version = '1.2.1';
	
	  Spine.isArray = isArray;
	
	  Spine.isBlank = isBlank;
	
	  Spine.$ = $;
	
	  Spine.Events = Events;
	
	  Spine.Log = Log;
	
	  Spine.Module = Module;
	
	  Spine.Controller = Controller;
	
	  Spine.Model = Model;
	
	  Module.extend.call(Spine, Events);
	
	  Module.create = Module.sub = Controller.create = Controller.sub = Model.sub = function(instances, statics) {
	    var Result, _ref;
	    Result = (function(_super) {
	      __extends(Result, _super);
	
	      function Result() {
	        _ref = Result.__super__.constructor.apply(this, arguments);
	        return _ref;
	      }
	
	      return Result;
	
	    })(this);
	    if (instances) {
	      Result.include(instances);
	    }
	    if (statics) {
	      Result.extend(statics);
	    }
	    if (typeof Result.unbind === "function") {
	      Result.unbind();
	    }
	    return Result;
	  };
	
	  Model.setup = function(name, attributes) {
	    var Instance, _ref;
	    if (attributes == null) {
	      attributes = [];
	    }
	    Instance = (function(_super) {
	      __extends(Instance, _super);
	
	      function Instance() {
	        _ref = Instance.__super__.constructor.apply(this, arguments);
	        return _ref;
	      }
	
	      return Instance;
	
	    })(this);
	    Instance.configure.apply(Instance, [name].concat(__slice.call(attributes)));
	    return Instance;
	  };
	
	  Spine.Class = Module;
	
	}).call(this);
	
	/*
	//@ sourceMappingURL=spine.map
	*/
	

}, 'is-mobile/index.js': function(exports, module) {

	/** node globals **/
	var require = function(name) {return window.require(name, 'is-mobile/index.js');};
	require.resolve = function(name, parent) {if (parent === null) {parent = 'is-mobile/index.js';} return window.require.resolve(name, parent);};
	require.define = function(bundle) {window.require.define(bundle);};
	require.cache = window.require.cache;
	var __filename = 'is-mobile/index.js';
	var __dirname = 'is-mobile';
	var process = {cwd: function() {return '/';}, argv: ['node', 'is-mobile/index.js'], env: {}};

	/** code **/
	module.exports = isMobile;
	
	function isMobile (ua) {
	  if (!ua && typeof navigator != 'undefined') ua = navigator.userAgent;
	  if (ua && ua.headers && typeof ua.headers['user-agent'] == 'string') {
	    ua = ua.headers['user-agent'];
	  }
	  if (typeof ua != 'string') return false;
	
	  return /(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(ua) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(ua.substr(0,4));
	}
	
	

}, 'dependency-injection/lib/DI.js': function(exports, module) {

	/** node globals **/
	var require = function(name) {return window.require(name, 'dependency-injection/lib/DI.js');};
	require.resolve = function(name, parent) {if (parent === null) {parent = 'dependency-injection/lib/DI.js';} return window.require.resolve(name, parent);};
	require.define = function(bundle) {window.require.define(bundle);};
	require.cache = window.require.cache;
	var __filename = 'dependency-injection/lib/DI.js';
	var __dirname = 'dependency-injection/lib';
	var process = {cwd: function() {return '/';}, argv: ['node', 'dependency-injection/lib/DI.js'], env: {}};

	/** code **/
	// Generated by CoffeeScript 1.6.3
	(function() {
	  var DI, Service,
	    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };
	
	  Service = require('./Service');
	
	  DI = (function() {
	    DI.prototype.services = null;
	
	    DI.prototype.reserved = ['di'];
	
	    function DI() {
	      this.services = {};
	    }
	
	    DI.prototype.addService = function(name, service, args) {
	      if (args == null) {
	        args = [];
	      }
	      if (__indexOf.call(this.reserved, name) >= 0) {
	        throw new Error("DI: name '" + name + "' is reserved by DI");
	      }
	      this.services[name] = new Service(this, service, args);
	      return this.services[name];
	    };
	
	    DI.prototype.autowireArguments = function(method, args) {
	      var arg, customArg, factory, i, methodArgs, num, result, self, _i, _ref,
	        _this = this;
	      if (args == null) {
	        args = [];
	      }
	      method = method.toString();
	      method = method.replace(/((\/\/.*$)|(\/\*[\s\S]*?\*\/))/mg, '');
	      methodArgs = method.slice(method.indexOf('(') + 1, method.indexOf(')')).match(/([^\s,]+)/g);
	      methodArgs = methodArgs === null ? [] : methodArgs;
	      num = methodArgs.length > args.length ? methodArgs.length : args.length;
	      result = [];
	      if (num === 0) {
	        return result;
	      }
	      for (i = _i = 0, _ref = num - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
	        arg = typeof methodArgs[i] === 'undefined' ? null : methodArgs[i];
	        if (arg === null) {
	          result.push(args[i]);
	        } else {
	          customArg = typeof args[i] !== 'undefined';
	          if (!customArg || (customArg && typeof args[i] === 'string' && (args[i] === '...' || args[i][0] === '@'))) {
	            if (customArg && args[i][0] === '@') {
	              arg = args[i].substr(1);
	            }
	            factory = false;
	            if (arg.match(/Factory$/) !== null) {
	              arg = arg.substring(0, arg.length - 7);
	              factory = true;
	            }
	            if (arg === 'di') {
	              self = factory === true ? function() {
	                return _this;
	              } : this;
	              result.push(self);
	            } else if (this.findDefinitionByName(arg).autowired === false) {
	              throw new Error("DI: service " + arg + " can not be autowired");
	            } else if (factory === true) {
	              result.push(this.getFactory(arg));
	            } else {
	              result.push(this.getByName(arg));
	            }
	          } else {
	            result.push(args[i]);
	          }
	        }
	      }
	      return result;
	    };
	
	    DI._newInstanceWrapper = function(obj, args) {
	      var f;
	      if (args == null) {
	        args = [];
	      }
	      f = function() {
	        return obj.apply(this, args);
	      };
	      f.prototype = obj.prototype;
	      return f;
	    };
	
	    DI.prototype.createInstance = function(service, args, instantiate) {
	      var method;
	      if (args == null) {
	        args = [];
	      }
	      if (instantiate == null) {
	        instantiate = true;
	      }
	      if (instantiate === true) {
	        service = new (DI._newInstanceWrapper(service, this.autowireArguments(service, args)));
	      }
	      for (method in service) {
	        if (method.match(/^inject/) !== null) {
	          this.inject(service[method], service);
	        }
	      }
	      return service;
	    };
	
	    DI.prototype.inject = function(fn, scope) {
	      var args;
	      if (scope == null) {
	        scope = {};
	      }
	      if (!(fn instanceof Function)) {
	        throw new Error('Inject method can be called only on functions.');
	      }
	      args = this.autowireArguments(fn, []);
	      return fn.apply(scope, args);
	    };
	
	    DI.prototype.findDefinitionByName = function(name, need) {
	      if (need == null) {
	        need = true;
	      }
	      if (typeof this.services[name] === 'undefined') {
	        if (need === true) {
	          throw new Error("DI: Service '" + name + "' was not found");
	        } else {
	          return null;
	        }
	      }
	      return this.services[name];
	    };
	
	    DI.prototype.getByName = function(name) {
	      return this.get(name);
	    };
	
	    DI.prototype.get = function(name) {
	      return this.findDefinitionByName(name).getInstance();
	    };
	
	    DI.prototype.create = function(name) {
	      return this.findDefinitionByName(name).create();
	    };
	
	    DI.prototype.getFactory = function(name) {
	      var _this = this;
	      return function() {
	        return _this.findDefinitionByName(name).create();
	      };
	    };
	
	    return DI;
	
	  })();
	
	  module.exports = DI;
	
	}).call(this);
	

}, 'dependency-injection/lib/Service.js': function(exports, module) {

	/** node globals **/
	var require = function(name) {return window.require(name, 'dependency-injection/lib/Service.js');};
	require.resolve = function(name, parent) {if (parent === null) {parent = 'dependency-injection/lib/Service.js';} return window.require.resolve(name, parent);};
	require.define = function(bundle) {window.require.define(bundle);};
	require.cache = window.require.cache;
	var __filename = 'dependency-injection/lib/Service.js';
	var __dirname = 'dependency-injection/lib';
	var process = {cwd: function() {return '/';}, argv: ['node', 'dependency-injection/lib/Service.js'], env: {}};

	/** code **/
	// Generated by CoffeeScript 1.6.3
	(function() {
	  var Service;
	
	  Service = (function() {
	    Service.prototype.di = null;
	
	    Service.prototype.service = null;
	
	    Service.prototype["arguments"] = null;
	
	    Service.prototype.instantiate = true;
	
	    Service.prototype.autowired = true;
	
	    Service.prototype.setup = null;
	
	    Service.prototype.instance = null;
	
	    function Service(di, service, _arguments) {
	      this.di = di;
	      this.service = service;
	      this["arguments"] = _arguments != null ? _arguments : [];
	      this.setup = {};
	    }
	
	    Service.prototype.getInstance = function() {
	      if (this.instance === null) {
	        this.instance = this.create();
	      }
	      return this.instance;
	    };
	
	    Service.prototype.create = function() {
	      var args, method, service, _ref;
	      service = this.service;
	      if (Object.prototype.toString.call(service) === '[object String]') {
	        service = require(service);
	      }
	      service = this.di.createInstance(service, this["arguments"], this.instantiate);
	      _ref = this.setup;
	      for (method in _ref) {
	        args = _ref[method];
	        if (typeof service[method] === 'function') {
	          service[method].apply(service, this.di.autowireArguments(service[method], args));
	        } else {
	          service[method] = args;
	        }
	      }
	      return service;
	    };
	
	    Service.prototype.addSetup = function(method, args) {
	      if (args == null) {
	        args = [];
	      }
	      this.setup[method] = args;
	      return this;
	    };
	
	    Service.prototype.setInstantiate = function(instantiate) {
	      this.instantiate = instantiate;
	      return this;
	    };
	
	    Service.prototype.setAutowired = function(autowired) {
	      this.autowired = autowired;
	      return this;
	    };
	
	    return Service;
	
	  })();
	
	  module.exports = Service;
	
	}).call(this);
	

}, '/tests/Controller.coffee': function(exports, module) {

	/** node globals **/
	var require = function(name) {return window.require(name, '/tests/Controller.coffee');};
	require.resolve = function(name, parent) {if (parent === null) {parent = '/tests/Controller.coffee';} return window.require.resolve(name, parent);};
	require.define = function(bundle) {window.require.define(bundle);};
	require.cache = window.require.cache;
	var __filename = '/tests/Controller.coffee';
	var __dirname = '/tests';
	var process = {cwd: function() {return '/';}, argv: ['node', '/tests/Controller.coffee'], env: {}};

	/** code **/
	(function() {
	  var Controller, DI, di;
	
	  DI = require('dependency-injection');
	
	  di = new DI;
	
	  di.addService('myArray', ['hello', 'word']).setInstantiate(false);
	
	  Controller = require('extended-spine-di/Controller');
	
	  Controller.init($, di, false);
	
	  describe('Controller', function() {
	    return describe('#createController()', function() {
	      return it('should create controller with autowired services', function() {
	        var c;
	        c = Controller.createController('/app/controllers/Controller', $('#test div'));
	        expect(c.el.attr('data-controller')).to.be.equal('/app/controllers/Controller');
	        return expect(c.myArray).to.be.eql(['hello', 'word']);
	      });
	    });
	  });
	
	}).call(this);
	

}, 'extended-spine-di/Controller.js': function(exports, module) {

	/** node globals **/
	var require = function(name) {return window.require(name, 'extended-spine-di/Controller.js');};
	require.resolve = function(name, parent) {if (parent === null) {parent = 'extended-spine-di/Controller.js';} return window.require.resolve(name, parent);};
	require.define = function(bundle) {window.require.define(bundle);};
	require.cache = window.require.cache;
	var __filename = 'extended-spine-di/Controller.js';
	var __dirname = 'extended-spine-di';
	var process = {cwd: function() {return '/';}, argv: ['node', 'extended-spine-di/Controller.js'], env: {}};

	/** code **/
	module.exports = require('./lib/Controller.js');

}, '/app/controllers/Controller.coffee': function(exports, module) {

	/** node globals **/
	var require = function(name) {return window.require(name, '/app/controllers/Controller.coffee');};
	require.resolve = function(name, parent) {if (parent === null) {parent = '/app/controllers/Controller.coffee';} return window.require.resolve(name, parent);};
	require.define = function(bundle) {window.require.define(bundle);};
	require.cache = window.require.cache;
	var __filename = '/app/controllers/Controller.coffee';
	var __dirname = '/app/controllers';
	var process = {cwd: function() {return '/';}, argv: ['node', '/app/controllers/Controller.coffee'], env: {}};

	/** code **/
	(function() {
	  var BaseController, Controller,
	    __hasProp = {}.hasOwnProperty,
	    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };
	
	  BaseController = require('extended-spine-di/Controller');
	
	  Controller = (function(_super) {
	    __extends(Controller, _super);
	
	    Controller.prototype.myArray = null;
	
	    function Controller(el, myArray) {
	      this.el = el;
	      this.myArray = myArray;
	      Controller.__super__.constructor.apply(this, arguments);
	    }
	
	    return Controller;
	
	  })(BaseController);
	
	  module.exports = Controller;
	
	}).call(this);
	

}, '/package.json': function(exports, module) {

	/** node globals **/
	var require = function(name) {return window.require(name, '/package.json');};
	require.resolve = function(name, parent) {if (parent === null) {parent = '/package.json';} return window.require.resolve(name, parent);};
	require.define = function(bundle) {window.require.define(bundle);};
	require.cache = window.require.cache;
	var __filename = '/package.json';
	var __dirname = '/';
	var process = {cwd: function() {return '/';}, argv: ['node', '/package.json'], env: {}};

	/** code **/
	module.exports = (function() {
	return {
		"name": "test"
	}
	}).call(this);
	

}, 'spine': function(exports, module) { module.exports = window.require('spine/index.js'); }
, 'is-mobile': function(exports, module) { module.exports = window.require('is-mobile/index.js'); }
, 'dependency-injection': function(exports, module) { module.exports = window.require('dependency-injection/lib/DI.js'); }

});

/** run section **/

/** /tests/Controller **/
require('/tests/Controller');